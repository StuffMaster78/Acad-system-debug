"""
Django settings for writing_system project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True' 

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")


# Application definition

INSTALLED_APPS = [
    # Django Default Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party Apps
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'django_filters',
    # 'django-rq',
    # 'django_celery_beat',
    # 'celery',
    'channels',
    'django_countries',
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist", 

    # Core Project Apps
    'core',
    'websites',
    'users',

    # Order Management
    'orders',
    'order_files',
    'order_communications',
    'order_configs',
    'pricing_configs',
    'special_orders',

    # Financial Apps
    'wallet',
    'discounts',
    'referrals',

    # Notifications and Support
    'notifications_system',
    'tickets',

    # Users Management Apps
    'superadmin_management',
    'admin_management',
    'client_management',
    'writer_management',
    'editor_management',
    'support_management',
    'loyalty_management',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'writing_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'writing_system.wsgi.application'

AUTH_USER_MODEL = 'users.User'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  
        'NAME': os.getenv('POSTGRES_DB'), #Database Name
        'USER': os.getenv('POSTGRES_USER'), #Database username
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'), #Database password
        "HOST": os.getenv("DB_HOST"),  # Hostname
        "PORT": os.getenv("DB_PORT"),  # Port
    }
}


print("Database:", os.getenv("POSTGRES_DB"))
print("User:", os.getenv("POSTGRES_USER"))
print("Password:", os.getenv("POSTGRES_PASSWORD"))
print("DATABASE NAME:", os.getenv('POSTGRES_DB'))

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS configuration (for handling CORS)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",  # Local development
    "http://127.0.0.1:8000",  # Local development
    "https://your-production-domain.com",  # Replace with your production domain
]



# Redis (if used for caching)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://{os.getenv('REDIS_HOST', 'redis')}:{os.getenv('REDIS_PORT', '6379')}/1",
    }
}



REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Your Project API',
    'DESCRIPTION': 'Your API documentation description',
    'VERSION': '1.0.0',
}

# Channels Settings
ASGI_APPLICATION = "writing_system.asgi.application"

# WebSocket Backend
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # Use your Redis instance here
        },
    },
}




# Email Settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"  # Or your email provider's SMTP host
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "your-email@gmail.com"
EMAIL_HOST_PASSWORD = "your-email-password"
DEFAULT_FROM_EMAIL = "Your Project Name <your-email@gmail.com>"






GEOLOCATION_API_KEY = os.getenv("GEOLOCATION_API_KEY")


# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Example using Redis
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'



RQ_QUEUES = {
    'default': {
        'USE_REDIS_CACHE': 'default',  # Use Redis as the backend
        'URL': 'redis://localhost:6379',  # Redis URL
        'DB': 0,
        'DEFAULT_TIMEOUT': 360,
    }
}



MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")




# DRF Settings with JWT Authentication
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

# JWT Token Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=6),  # Admin session valid for 6 hours
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # Refresh token valid for 7 days
    "ROTATE_REFRESH_TOKENS": True,  # Generates new refresh token on every refresh
    "BLACKLIST_AFTER_ROTATION": True,  # Prevents reuse of old refresh tokens
    "AUTH_HEADER_TYPES": ("Bearer",),  # Allows "Bearer <token>" in headers
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

AUTHENTICATION_BACKENDS = [
    "admin_management.auth.BlacklistAuthenticationBackend",  # Custom authentication
    "django.contrib.auth.backends.ModelBackend",  # Default Django authentication
]
