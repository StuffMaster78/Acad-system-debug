"""
Django settings for writing_system project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
from dotenv import load_dotenv # type: ignore
import os
from datetime import timedelta
from celery.schedules import crontab # type: ignore
# import sentry_sdk
# from sentry_sdk.integrations.django import DjangoIntegration

from cryptography.fernet import Fernet # type: ignore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")


# Application definition

INSTALLED_APPS = [
    # Django Default Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'django_ratelimit',
    'django_filters',
    'django_celery_beat',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'drf_yasg',
    

    # Third-party Apps
    'rest_framework',
    'corsheaders',
    # 'drf-queryfields',
    # 'django-rq',
    'celery',
    'channels',
    'django_countries',
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "import_export", 


    # Core Project Apps
    'core',
    'websites',
    'users',


    # Order Management
    'orders',
    'order_payments_management',
    'order_files',
    'order_communications',
    'order_configs',
    'pricing_configs',
    'special_orders',


    # Financial Apps
    'wallet',
    'client_wallet',
    'writer_wallet',
    'discounts',
    'referrals',

    # Notifications and Support
    'notifications_system',
    'tickets',
    'mass_emails',

    # Users Management Apps
    'superadmin_management',
    'admin_management',
    'client_management',
    'writer_management',
    'editor_management',
    'support_management',
    'loyalty_management',
    'activity',

    # Content Management Apps
    'blog_pages_management',
    'service_pages_management',

     # Shared Utilities App
     "common",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'superadmin_management.middleware.BlacklistMiddleware',
    'django.middleware.gzip.GZipMiddleware',  # Compress API responses'
]

ROOT_URLCONF = 'writing_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'writing_system.wsgi.application'

AUTH_USER_MODEL = 'users.User'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),  #Database Name
        'USER': os.getenv('POSTGRES_USER'),  #Database username
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),  #Database password
        "HOST": os.getenv("DB_HOST"),  # Hostname
        "PORT": os.getenv("DB_PORT"),  # Port
    }
}


print("Database:", os.getenv("POSTGRES_DB"))
print("User:", os.getenv("POSTGRES_USER"))
print("Password:", os.getenv("POSTGRES_PASSWORD"))
print("DATABASE NAME:", os.getenv('POSTGRES_DB'))

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS configuration (for handling CORS)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",  # Local development
    "http://127.0.0.1:8000",  # Local development
    # "https://your-production-domain.com",  # To replace with production domain
]

REDIS_HOST = os.getenv("REDIS_HOST", "localhost")  # Default to localhost if not set
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))  # Default Redis port

# Redis (if used for caching)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://{os.getenv('REDIS_HOST', 'redis')}:{os.getenv('REDIS_PORT', '6379')}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

PASSKEY_CHALLENGE_TTL = 300  # 5 minutes
PASSKEY_REDIS_PREFIX = "passkey"

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


REST_FRAMEWORK = {
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': '1.0',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Your Project API',
    'DESCRIPTION': 'Order Management System API documentation',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,  # Prevents duplicate schema listing
    'SCHEMA_PATH_PREFIX': r'/api/',  # Ensures only `/api/` endpoints are documented
    # 'SERVE_PERMISSIONS': ['rest_framework.permissions.IsAdminUser'], 
}

# Channels Settings
ASGI_APPLICATION = "writing_system.asgi.application"

# WebSocket Backend
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # Use your Redis instance here
        },
    },
}


# Email Settings
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)

# Geolocation API Key
GEOLOCATION_API_KEY = os.getenv("GEOLOCATION_API_KEY")


# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Example using Redis
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
RQ_QUEUES = {
    'default': {
        'USE_REDIS_CACHE': 'default',  # Use Redis as the backend
        'URL': 'redis://localhost:6379',  # Redis URL
        'DB': 0,
        'DEFAULT_TIMEOUT': 360,
    }
}
#  Media
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# DRF Settings with JWT Authentication
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
        'users.throttling.LoginThrottle',
        'users.throttling.MagicLinkThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '1000/day',  # Normal authenticated users
        'anon': '100/hour',  # Unauthenticated users
        'login': '5/minute',  # Limit login attempts to 5 per minute
        'magic_link': '3/minute',  # Limit magic link requests to 3 per minute
    },
}

# JWT Token Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),  # Admin session valid for 6 hours
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # Refresh token valid for 7 days
    "ROTATE_REFRESH_TOKENS": True,  # Generates new refresh token on every refresh
    "BLACKLIST_AFTER_ROTATION": True,  # Prevents reuse of old refresh tokens
    "AUTH_HEADER_TYPES": ("Bearer",),  # Allows "Bearer <token>" in headers
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

SECURE_SSL_REDIRECT = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True


AUTHENTICATION_BACKENDS = [
    "admin_management.auth.BlacklistAuthenticationBackend",  # Custom authentication
    "django.contrib.auth.backends.ModelBackend",  # Default Django authentication
]

CELERY_BEAT_SCHEDULE = {
    'expire-referral-bonuses': {
        'task': 'your_app.tasks.expire_referral_bonuses',
        'schedule': crontab(hour=0, minute=0),  # Run daily at midnight
    },
    'notify-referral-bonus-expiration': {
        'task': 'your_app.tasks.notify_referral_bonus_expiration',
        'schedule': crontab(hour=9, minute=0),  # Run daily at 9 AM
    },
    'decay-referral-bonuses': {
        'task': 'your_app.tasks.decay_referral_bonuses',
        'schedule': crontab(hour=0, minute=0),  # Run daily at midnight
    },
    'expire-referral-bonus-every-night': {
        'task': 'client_wallet.tasks.expire_referral_bonus',
        'schedule': timedelta(days=1),  # Run once every day
    },
    'adjust-wallet-balance-for-referrals': {
        'task': 'client_wallet.tasks.adjust_wallet_balance_for_referrals',
        'schedule': timedelta(days=1),  # Run once every day
    },
    'check-and-update-loyalty-points': {
        'task': 'client_wallet.tasks.check_and_update_loyalty_points',
        'schedule': timedelta(days=7),  # Run once every week
    },
    'daily_soft_delete_cleanup': {
        "task": "users.tasks.deletion.cleanup_soft_deleted_models",
        "schedule": crontab(hour=3, minute=0),  # every day at 3AM
    }
}
RATELIMIT_VIEW = os.getenv("RATELIMIT_VIEW")
MAX_FAILED_ATTEMPTS = os.getenv("MAX_FAILED_ATTEMPTS")
LOCKOUT_DURATION_MINUTES = int(os.getenv("LOCKOUT_DURATION_MINUTES"))
SESSION_EXPIRATION_DAYS = os.getenv("SESSION_EXPIRATION_DAYS")

LOCKOUT_DURATION = timedelta(minutes=LOCKOUT_DURATION_MINUTES)


# # Sentry settings
# sentry_sdk.init(
#     dsn="YOUR_SENTRY_DSN",  # Replace with your actual DSN
#     integrations=[DjangoIntegration()],
#     traces_sample_rate=1.0,  # Adjust sampling rate if needed
#     send_default_pii=True  # Sends user data (useful for debugging authentication issues)
# )


# SENTRY_DSN = os.getenv("SENTRY_DSN")  # or use settings if you're using django-environ

# if SENTRY_DSN:
#     sentry_sdk.init(
#         dsn=SENTRY_DSN,
#         integrations=[DjangoIntegration()],
#         traces_sample_rate=1.0,
#         send_default_pii=True,
#     )

# FERNET_KEY = Fernet.generate_key().decode() 

TEMPLATES[0]["DIRS"] += [BASE_DIR / "common" / "templates"]