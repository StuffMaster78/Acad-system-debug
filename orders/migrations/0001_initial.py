# Generated by Django 5.1.5 on 2025-02-04 03:18

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_review', 'In Review'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('closed', 'Closed')], default='open', help_text='The current status of the dispute.', max_length=20)),
                ('resolution_outcome', models.CharField(blank=True, choices=[('writer_wins', 'Writer Wins'), ('client_wins', 'Client Wins'), ('extend_deadline', 'Extend Deadline'), ('reassign', 'Reassign Order')], help_text='Outcome of the dispute resolution.', max_length=20, null=True)),
                ('reason', models.TextField(help_text='Reason for raising the dispute.')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes or comments regarding the resolution of the dispute.', null=True)),
                ('writer_responded', models.BooleanField(default=False, help_text='Indicates whether the writer has responded to the dispute.')),
                ('admin_extended_deadline', models.DateTimeField(blank=True, help_text='If set, admin has manually extended the deadline.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the dispute was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the dispute was last updated.')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DisputeWriterResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField(help_text="Writer's response or clarification.")),
                ('response_file', models.FileField(blank=True, help_text='Optional file upload for revised work.', null=True, upload_to='dispute_responses/')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Time of response.')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FailedPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(max_length=255)),
                ('failure_reason', models.TextField()),
                ('failed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('retry_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Failed Payment',
                'verbose_name_plural': 'Failed Payments',
                'ordering': ['-failed_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('topic', models.CharField(help_text='The topic or title of the order.', max_length=255)),
                ('instructions', models.TextField(help_text='Detailed instructions for the order.')),
                ('pages', models.PositiveIntegerField(help_text='Number of pages required.')),
                ('slides', models.PositiveIntegerField(default=0, help_text='Number of slides.')),
                ('resources', models.PositiveIntegerField(default=0, help_text='Number of references or sources.')),
                ('spacing', models.CharField(choices=[('single', 'Single'), ('double', 'Double')], default='double', help_text='Spacing for the order.', max_length=10)),
                ('status', models.CharField(choices=[('unpaid', 'Unpaid'), ('pending', 'Pending'), ('on_hold', 'On Hold'), ('available', 'Available'), ('critical', 'Critical'), ('assigned', 'Assigned'), ('late', 'Late'), ('revision', 'Revision'), ('disputed', 'Disputed'), ('completed', 'Completed'), ('approved', 'Approved'), ('cancelled', 'Cancelled'), ('archived', 'Archived')], default='unpaid', help_text='Current status of the order.', max_length=20)),
                ('flag', models.CharField(blank=True, choices=[('UO', 'Urgent Order'), ('FCO', 'First Client Order'), ('HVO', 'High-Value Order'), ('PO', 'Preferred Order'), ('RCO', 'Returning Client Order')], help_text='System-assigned or admin-set order flag.', max_length=3, null=True)),
                ('deadline', models.DateTimeField(help_text='The deadline for the order.')),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost of the order.', max_digits=10, null=True)),
                ('writer_compensation', models.DecimalField(blank=True, decimal_places=2, help_text='Compensation for the writer.', max_digits=10, null=True)),
                ('writer_deadline', models.DateTimeField(blank=True, help_text="Writer's deadline.", null=True)),
                ('is_paid', models.BooleanField(default=False, help_text='Indicates if the order is paid.')),
                ('created_by_admin', models.BooleanField(default=False, help_text='Indicates if the order was created by an admin.')),
                ('is_special_order', models.BooleanField(default=False, help_text='Indicates if this is a special order.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the order was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the order was last updated.')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=255, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('date_processed', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='WriterProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.PositiveIntegerField(help_text='Progress percentage (0-100).')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]
