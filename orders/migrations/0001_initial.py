# Generated by Django 5.1.5 on 2025-01-29 15:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('discounts', '__first__'),
        ('order_configs', '__first__'),
        ('pricing_configs', '__first__'),
        ('websites', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('topic', models.CharField(help_text='The topic or title of the order.', max_length=255)),
                ('instructions', models.TextField(help_text='Detailed instructions for the order.')),
                ('pages', models.PositiveIntegerField(help_text='Number of pages required.')),
                ('slides', models.PositiveIntegerField(default=0, help_text='Number of slides.')),
                ('resources', models.PositiveIntegerField(default=0, help_text='Number of references or sources.')),
                ('spacing', models.CharField(choices=[('single', 'Single'), ('double', 'Double')], default='double', help_text='Spacing for the order.', max_length=10)),
                ('status', models.CharField(choices=[('unpaid', 'Unpaid'), ('pending', 'Pending'), ('on_hold', 'On Hold'), ('available', 'Available'), ('critical', 'Critical'), ('assigned', 'Assigned'), ('late', 'Late'), ('revision', 'Revision'), ('disputed', 'Disputed'), ('completed', 'Completed'), ('approved', 'Approved'), ('cancelled', 'Cancelled'), ('archived', 'Archived')], default='unpaid', help_text='Current status of the order.', max_length=20)),
                ('flag', models.CharField(blank=True, choices=[('UO', 'Urgent Order'), ('FCO', 'First Client Order'), ('HVO', 'High-Value Order'), ('PO', 'Preferred Order'), ('RCO', 'Returning Client Order')], help_text='System-assigned or admin-set order flag.', max_length=3, null=True)),
                ('deadline', models.DateTimeField(help_text='The deadline for the order.')),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost of the order.', max_digits=10, null=True)),
                ('writer_compensation', models.DecimalField(blank=True, decimal_places=2, help_text='Compensation for the writer.', max_digits=10, null=True)),
                ('writer_deadline', models.DateTimeField(blank=True, help_text="Writer's deadline.", null=True)),
                ('is_paid', models.BooleanField(default=False, help_text='Indicates if the order is paid.')),
                ('created_by_admin', models.BooleanField(default=False, help_text='Indicates if the order was created by an admin.')),
                ('is_special_order', models.BooleanField(default=False, help_text='Indicates if this is a special order.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the order was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the order was last updated.')),
                ('academic_level', models.ForeignKey(blank=True, help_text='The academic level required.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pricing_configs.academiclevelpricing')),
                ('client', models.ForeignKey(blank=True, help_text='The client who placed this order. Leave blank for admin-created orders.', limit_choices_to={'role': 'client'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders_as_client', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created the record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('discount_code', models.ForeignKey(blank=True, help_text='Discount code applied to this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='discounts.discount')),
                ('english_type', models.ForeignKey(blank=True, help_text='Preferred English style for the paper.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='order_configs.englishtype')),
                ('extra_services', models.ManyToManyField(blank=True, help_text='Additional services requested by the client or admin.', related_name='orders', to='pricing_configs.additionalservice')),
                ('formatting_style', models.ForeignKey(blank=True, help_text='The formatting style required.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='order_configs.formattingstyle')),
                ('paper_type', models.ForeignKey(help_text='The type of paper requested.', on_delete=django.db.models.deletion.PROTECT, to='order_configs.papertype')),
                ('preferred_writer', models.ForeignKey(blank=True, help_text='Preferred writer for this order.', limit_choices_to={'role': 'writer'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(blank=True, help_text='The subject of the order.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='order_configs.subject')),
                ('type_of_work', models.ForeignKey(blank=True, help_text='The type of work requested.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='order_configs.typeofwork')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated the record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(blank=True, help_text='Website this record is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='websites.website')),
                ('writer', models.ForeignKey(blank=True, help_text='The writer assigned to this order.', limit_choices_to={'role': 'writer'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_as_writer', to=settings.AUTH_USER_MODEL)),
                ('writer_quality', models.ForeignKey(blank=True, help_text='Selected writer quality level.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pricing_configs.writerquality')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_review', 'In Review'), ('resolved', 'Resolved'), ('escalated', 'Escalated'), ('closed', 'Closed')], default='open', help_text='The current status of the dispute.', max_length=20)),
                ('reason', models.TextField(help_text='Reason for raising the dispute.')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes or comments regarding the resolution of the dispute.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the dispute was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the dispute was last updated.')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created the record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('raised_by', models.ForeignKey(blank=True, help_text='The user who raised the dispute (client, writer, or admin).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disputes_raised', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated the record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(blank=True, help_text='Website this record is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='websites.website')),
                ('order', models.ForeignKey(help_text='The order associated with this dispute.', on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='orders.order')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WriterProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.PositiveIntegerField(help_text='Progress percentage (0-100).')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(help_text='The order associated with this progress log.', on_delete=django.db.models.deletion.CASCADE, related_name='progress_logs', to='orders.order')),
                ('writer', models.ForeignKey(help_text='The writer associated with this progress log.', limit_choices_to={'role': 'writer'}, on_delete=django.db.models.deletion.CASCADE, related_name='progress_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
