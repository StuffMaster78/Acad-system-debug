# Generated by Django 5.1.6 on 2025-02-22 03:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0003_remove_paymenttransaction_order_and_more'),
        ('websites', '0001_initial'),
        ('writer_management', '0002_alter_writerpayoutpreference_preferred_method_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EditorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the editor.', max_length=255)),
                ('registration_id', models.CharField(help_text='Unique editor registration ID (e.g., Editor #12345).', max_length=50, unique=True)),
                ('email', models.EmailField(help_text='Editor’s email address.', max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text='Editor’s phone number.', max_length=15, null=True)),
                ('last_logged_in', models.DateTimeField(blank=True, help_text='The last time the editor logged in.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the editor is active.')),
                ('orders_reviewed', models.PositiveIntegerField(default=0, help_text='Total number of orders reviewed by the editor.')),
                ('user', models.OneToOneField(help_text='The user associated with this editor profile.', limit_choices_to={'role': 'editor'}, on_delete=django.db.models.deletion.CASCADE, related_name='editor_profile', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(help_text='The website the editor is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='editors', to='websites.website')),
                ('writers_assigned', models.ManyToManyField(blank=True, help_text='Writers assigned to this editor.', related_name='editors', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EditorPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_review_time', models.DurationField(blank=True, help_text='Average time taken to review tasks.', null=True)),
                ('total_orders_reviewed', models.PositiveIntegerField(default=0, help_text='Total number of orders reviewed by the editor.')),
                ('late_reviews', models.PositiveIntegerField(default=0, help_text='Number of reviews completed past the deadline.')),
                ('editor', models.OneToOneField(help_text='The editor whose performance is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='performance', to='editor_management.editorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EditorNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text='Notification message.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of the notification.')),
                ('is_read', models.BooleanField(default=False, help_text='Indicates whether the notification has been read.')),
                ('related_order', models.ForeignKey(blank=True, help_text='Related order, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor_notifications', to='orders.order')),
                ('editor', models.ForeignKey(help_text='The editor receiving the notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='editor_management.editorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EditorActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text="Description of the action performed (e.g., 'Reviewed Order').", max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp of the action.')),
                ('related_order', models.ForeignKey(blank=True, help_text='The order associated with this action.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editor_actions', to='orders.order')),
                ('editor', models.ForeignKey(help_text='The editor performing the action.', on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='editor_management.editorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EditorTaskAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_status', models.CharField(choices=[('pending', 'Pending'), ('in_review', 'In Review'), ('completed', 'Completed')], default='pending', help_text='The current review status of the task.', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Timestamp when the task was reviewed.', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or feedback from the editor.', null=True)),
                ('assigned_editor', models.ForeignKey(blank=True, help_text='The primary editor assigned to review this task.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to='editor_management.editorprofile')),
                ('fallback_editors', models.ManyToManyField(blank=True, help_text='Fallback editors who can access this task.', related_name='fallback_tasks', to='editor_management.editorprofile')),
                ('order', models.OneToOneField(help_text='The order being assigned for review.', on_delete=django.db.models.deletion.CASCADE, related_name='editor_assignment', to='orders.order')),
            ],
        ),
    ]
