# Generated by Django 5.1.5 on 2025-01-29 11:35

import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('role', models.CharField(choices=[('superadmin', 'Super Admin'), ('admin', 'Admin'), ('editor', 'Editor'), ('support', 'Support'), ('writer', 'Writer'), ('client', 'Client')], default='client', help_text='Role assigned to the user.', max_length=20)),
                ('profile_picture', models.ImageField(blank=True, help_text='Upload a profile picture.', null=True, upload_to='profile_pictures/')),
                ('avatar', models.CharField(blank=True, choices=[('avatars/universal.png', 'Universal Avatar'), ('avatars/male1.png', 'Male Avatar 1'), ('avatars/male2.png', 'Male Avatar 2'), ('avatars/female1.png', 'Female Avatar 1'), ('avatars/female2.png', 'Female Avatar 2')], default='avatars/male1.png', help_text='Select a predefined avatar for privacy.', max_length=255, null=True)),
                ('bio', models.TextField(blank=True, help_text='Optional bio field for writers/editors.', null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Contact number for the user.', max_length=15, null=True)),
                ('is_available', models.BooleanField(default=True, help_text='Indicates whether the user is available for tasks.')),
                ('is_impersonated', models.BooleanField(default=False, help_text='Indicates whether this user is currently being impersonated.')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(blank=True, help_text='Last activity timestamp.', null=True)),
                ('is_frozen', models.BooleanField(default=False, help_text='Is the account frozen due to a deletion request?')),
                ('deletion_date', models.DateTimeField(blank=True, help_text='Scheduled date for account deletion.', null=True)),
                ('is_blacklisted', models.BooleanField(default=False, help_text="Is the user's email blacklisted for the website?")),
                ('is_deletion_requested', models.BooleanField(default=False, help_text='Has the user requested account deletion?')),
                ('deletion_requested_at', models.DateTimeField(blank=True, help_text='When the account deletion was requested.', null=True)),
                ('is_suspended', models.BooleanField(default=False, help_text='Indicates whether the user is suspended.')),
                ('is_on_probation', models.BooleanField(default=False, help_text='Indicates whether the user is on probation.')),
                ('suspension_reason', models.TextField(blank=True, help_text='Reason for suspension.', null=True)),
                ('probation_reason', models.TextField(blank=True, help_text='Reason for probation.', null=True)),
                ('suspension_start_date', models.DateTimeField(blank=True, null=True)),
                ('suspension_end_date', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('impersonated_by', models.ForeignKey(blank=True, help_text='Admin currently impersonating this user.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='impersonated_users', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
