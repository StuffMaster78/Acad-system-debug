# Generated by Django 5.1.5 on 2025-02-04 03:18

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0002_initial'),
        ('websites', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WriterConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('takes_enabled', models.BooleanField(default=True, help_text='If True, writers can take orders directly. If False, writers must request orders.')),
                ('max_requests_per_writer', models.PositiveIntegerField(default=5, help_text='Maximum number of order requests a writer can have at once.')),
            ],
        ),
        migrations.CreateModel(
            name='WriterLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the writer level (e.g., Beginner, Intermediate).', max_length=50, unique=True)),
                ('max_orders', models.PositiveIntegerField(default=10, help_text='Maximum number of orders the writer can take simultaneously.')),
                ('base_pay_per_page', models.DecimalField(decimal_places=2, default=0.0, help_text='Base pay per page.', max_digits=10)),
                ('base_pay_per_slide', models.DecimalField(decimal_places=2, default=0.0, help_text='Base pay per slide.', max_digits=10)),
                ('urgency_percentage_increase', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentage increase for urgent orders.', max_digits=5)),
                ('urgency_deadline_limit', models.PositiveIntegerField(default=8, help_text="Maximum hours considered as 'urgent' (e.g., orders within 8 hours get extra pay).")),
                ('technical_order_adjustment_per_page', models.DecimalField(decimal_places=2, default=0.0, help_text='Extra pay per page for technical orders.', max_digits=10)),
                ('technical_order_adjustment_per_slide', models.DecimalField(decimal_places=2, default=0.0, help_text='Extra pay per slide for technical orders.', max_digits=10)),
                ('tip_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Tip percentage.', max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='WriterRewardCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the reward criteria (e.g., 'Top Performer').", max_length=200)),
                ('min_completed_orders', models.PositiveIntegerField(default=10, help_text='Minimum orders required.')),
                ('min_rating', models.DecimalField(decimal_places=2, default=4.5, help_text='Minimum rating required.', max_digits=3)),
                ('min_earnings', models.DecimalField(decimal_places=2, default=500.0, help_text='Minimum earnings required.', max_digits=12)),
                ('auto_reward_enabled', models.BooleanField(default=True, help_text='Enable automatic rewards.')),
            ],
        ),
        migrations.CreateModel(
            name='WriterMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Message content.')),
                ('attachment', models.FileField(blank=True, help_text='Optional message attachment.', null=True, upload_to='writer_messages/')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('flagged', models.BooleanField(default=False, help_text='Flagged for admin moderation.')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_writer_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WriterMessageModeration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for flagging the message.')),
                ('reviewed', models.BooleanField(default=False, help_text='Has the admin reviewed this message?')),
                ('action_taken', models.CharField(blank=True, choices=[('Delete', 'Delete'), ('Warn Writer', 'Warn Writer'), ('No Action', 'No Action')], max_length=50, null=True)),
                ('flagged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_messages', to=settings.AUTH_USER_MODEL)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderation', to='writer_management.writermessage')),
            ],
        ),
        migrations.CreateModel(
            name='WriterMessageThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_threads', to='orders.order')),
                ('participant', models.ForeignKey(help_text='The client or admin participating in the thread.', on_delete=django.db.models.deletion.CASCADE, related_name='writer_participant_threads', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='writermessage',
            name='thread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='writer_management.writermessagethread'),
        ),
        migrations.CreateModel(
            name='WriterProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_id', models.CharField(help_text='Unique writer registration ID (e.g., Writer #12345).', max_length=50, unique=True)),
                ('email', models.EmailField(help_text="Writer's email address.", max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text="Writer's phone number.", max_length=15, null=True)),
                ('country', models.CharField(blank=True, help_text="Writer's country.", max_length=100, null=True)),
                ('timezone', models.CharField(default='UTC', help_text="Writer's timezone.", max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Last known IP address of the writer.', null=True)),
                ('location_verified', models.BooleanField(default=False, help_text="Whether the writer's location has been verified.")),
                ('joined', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the writer joined.')),
                ('last_logged_in', models.DateTimeField(blank=True, help_text='The last time the writer logged in.', null=True)),
                ('completed_orders', models.PositiveIntegerField(default=0, help_text='Total completed orders by the writer.')),
                ('number_of_takes', models.PositiveIntegerField(default=0, help_text='Total orders the writer has accepted.')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings by the writer.', max_digits=12)),
                ('verification_status', models.BooleanField(default=False, help_text='Indicates whether the writer has been verified.')),
                ('verification_documents', models.JSONField(blank=True, default=dict, help_text='Uploaded documents for verification (e.g., ID, certificates).')),
                ('skills', models.TextField(blank=True, help_text='Skills and specialties of the writer.', null=True)),
                ('subject_preferences', models.TextField(blank=True, help_text='Subjects or topics the writer prefers to handle.', null=True)),
                ('education', models.JSONField(blank=True, default=list, help_text='List of schools attended and uploaded certificates.')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating of the writer.', max_digits=3)),
                ('active_orders', models.PositiveIntegerField(default=0, help_text='Number of ongoing orders assigned to the writer.')),
                ('user', models.OneToOneField(help_text='The user associated with this writer profile.', limit_choices_to={'role': 'writer'}, on_delete=django.db.models.deletion.CASCADE, related_name='writer_profile', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(help_text='Website the writer is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='writers', to='websites.website')),
                ('writer_level', models.ForeignKey(blank=True, help_text='The level of the writer.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='writers', to='writer_management.writerlevel')),
            ],
        ),
        migrations.CreateModel(
            name='WriterPerformanceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateTimeField(help_text='Start of performance tracking period.')),
                ('period_end', models.DateTimeField(help_text='End of performance tracking period.')),
                ('completed_orders', models.PositiveIntegerField(default=0, help_text='Total completed orders.')),
                ('disputes', models.PositiveIntegerField(default=0, help_text='Total disputes.')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating for the period.', max_digits=3)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_reports', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterPenalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('Late Submission', 'Late Submission'), ('Plagiarism', 'Plagiarism'), ('Missed Deadline', 'Missed Deadline'), ('Client Complaint', 'Client Complaint'), ('Other', 'Other')], help_text='Reason for penalty.', max_length=50)),
                ('amount_deducted', models.DecimalField(decimal_places=2, default=0.0, help_text='Fine deducted from earnings.', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes.', null=True)),
                ('applied_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='penalty_appliers', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='penalties', to='orders.order')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterPayoutPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_method', models.CharField(choices=[('Bank Transfer', 'Bank Transfer'), ('PayPal', 'PayPal'), ('Crypto', 'Crypto'), ('Other', 'Other')], default='PayPal', max_length=20)),
                ('payout_threshold', models.DecimalField(decimal_places=2, default=50.0, help_text='Minimum payout threshold.', max_digits=12)),
                ('account_details', models.JSONField(blank=True, default=dict, help_text='Payment account details (e.g., PayPal email, bank details).')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_preferences', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total payment amount.', max_digits=12)),
                ('bonuses', models.DecimalField(decimal_places=2, default=0.0, help_text='Bonuses received.', max_digits=12)),
                ('fines', models.DecimalField(decimal_places=2, default=0.0, help_text='Fines deducted.', max_digits=12)),
                ('tips', models.DecimalField(decimal_places=2, default=0.0, help_text='Tips received.', max_digits=12)),
                ('payment_date', models.DateTimeField(auto_now_add=True, help_text='Date of payment.')),
                ('description', models.TextField(blank=True, help_text='Payment description.', null=True)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterOrderTake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taken_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the order was taken.')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer_takes', to='orders.order')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taken_orders', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterOrderRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(auto_now_add=True, help_text='When the request was made.')),
                ('approved', models.BooleanField(default=False, help_text='Has the request been approved?')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer_requests', to='orders.order')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_request_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterOrderReopenRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for reopening the order.')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reopen_requests', to='orders.order')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reopen_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reopen_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterOrderHoldRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for requesting hold.')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hold_requests', to='orders.order')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hold_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hold_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.AddField(
            model_name='writermessagethread',
            name='writer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_threads', to='writer_management.writerprofile'),
        ),
        migrations.CreateModel(
            name='WriterLeave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(help_text='Start date of the leave period.')),
                ('end_date', models.DateTimeField(help_text='End date of the leave period.')),
                ('reason', models.TextField(blank=True, help_text='Reason for the leave (e.g., vacation, emergency).', null=True)),
                ('approved', models.BooleanField(default=False, help_text='Whether the leave has been approved by an admin.')),
                ('writer', models.ForeignKey(help_text='The writer who is unavailable.', on_delete=django.db.models.deletion.CASCADE, related_name='leaves', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterIPLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address used by the writer.')),
                ('logged_at', models.DateTimeField(auto_now_add=True)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ip_logs', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterFileDownloadLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(help_text='Name of the downloaded file.', max_length=255)),
                ('downloaded_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer_file_download_logs', to='orders.order')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_download_logs', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(help_text='Name of the educational institution.', max_length=255)),
                ('degree', models.CharField(help_text='Degree or certification obtained.', max_length=255)),
                ('graduation_year', models.PositiveIntegerField(blank=True, help_text='Year of graduation.', null=True)),
                ('document', models.FileField(help_text='Upload proof of education (e.g., certificate).', upload_to='education_certificates/')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether this education has been verified by the admin.')),
                ('writer', models.ForeignKey(help_text='The writer whose education details are being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='education_details', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterEarningsReviewRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for requesting earnings review.')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True, help_text='Admin resolution notes.', null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_review_requests', to='orders.order')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_review_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterEarningsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateTimeField(help_text='Start date of the earnings period.')),
                ('period_end', models.DateTimeField(help_text='End date of the earnings period.')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings for the period.', max_digits=12)),
                ('orders_completed', models.PositiveIntegerField(default=0, help_text='Number of completed orders during this period.')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_history', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterDemotionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for requesting writer demotion.')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demotion_requests_made', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demotion_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demotion_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterDeadlineExtensionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_deadline', models.DateTimeField(help_text='Current order deadline.')),
                ('requested_deadline', models.DateTimeField(help_text='New requested deadline.')),
                ('reason', models.TextField(help_text='Reason for requesting a deadline extension.')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deadline_extension_requests', to='orders.order')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deadline_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deadline_extension_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterAutoRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promoted', models.BooleanField(default=False, help_text='Has the writer been auto-promoted?')),
                ('demoted', models.BooleanField(default=False, help_text='Has the writer been auto-demoted?')),
                ('reason', models.TextField(help_text='Reason for auto-promotion/demotion.')),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranking_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auto_ranking', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterActivityTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, help_text='Last time the writer logged in.', null=True)),
                ('last_seen', models.DateTimeField(blank=True, help_text='Last time the writer was active.', null=True)),
                ('writer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='activity_tracking', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('Order Accepted', 'Order Accepted'), ('Order Submitted', 'Order Submitted'), ('File Uploaded', 'File Uploaded'), ('Message Sent', 'Message Sent'), ('Request Made', 'Request Made'), ('Reopened Order', 'Reopened Order'), ('Deadline Extension Requested', 'Deadline Extension Requested'), ('Reassignment Requested', 'Reassignment Requested')], help_text='Type of action performed.', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Additional details about the action.', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Time the action was recorded.')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_logs', to='orders.order')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('warning', 'Warning'), ('probation', 'Probation'), ('suspension', 'Suspension'), ('deactivation', 'Deactivation')], help_text='The type of action taken.', max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Reason for taking this action.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('writer', models.ForeignKey(help_text='The writer this action applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Probation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for probation.')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(help_text='Date when probation ends.')),
                ('is_active', models.BooleanField(default=True)),
                ('placed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='probation_admins', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='probation_records', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total payment amount made to the writer.', max_digits=12)),
                ('bonuses', models.DecimalField(decimal_places=2, default=0.0, help_text='Bonuses received by the writer.', max_digits=12)),
                ('fines', models.DecimalField(decimal_places=2, default=0.0, help_text='Fines deducted from the writer.', max_digits=12)),
                ('tips', models.DecimalField(decimal_places=2, default=0.0, help_text='Tips received by the writer.', max_digits=12)),
                ('payment_date', models.DateTimeField(auto_now_add=True, help_text='Date of the payment.')),
                ('description', models.TextField(blank=True, help_text='Optional description for the payment.', null=True)),
                ('writer', models.ForeignKey(help_text='The writer receiving the payment.', on_delete=django.db.models.deletion.CASCADE, related_name='payment_history', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='OrderDispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for disputing the order.')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True, help_text='Admin notes on dispute resolution.', null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer_order_disputes', to='orders.order')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispute_resolutions', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Rating given by the client (1 to 5).')),
                ('feedback', models.TextField(blank=True, help_text='Optional feedback provided by the client.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the rating was created.')),
                ('client', models.ForeignKey(help_text='The client providing the rating.', limit_choices_to={'role': 'client'}, on_delete=django.db.models.deletion.CASCADE, related_name='ratings_given', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(help_text='The order associated with this rating.', on_delete=django.db.models.deletion.CASCADE, related_name='writer_ratings', to='orders.order')),
                ('writer', models.ForeignKey(help_text='The writer being rated.', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterRatingCooldown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooldown_until', models.DateTimeField(help_text='Time until the client can submit a rating.')),
                ('rating_allowed', models.BooleanField(default=False, help_text='Has the cooldown expired?')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating_cooldown', to='orders.order')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_cooldowns', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterReassignmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for requesting reassignment.')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('approved', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reassignment_requests', to='orders.order')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reassignment_reviews', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reassignment_requests', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Custom title for the reward (e.g., 'Top Performer').", max_length=200)),
                ('performance_metric', models.JSONField(blank=True, default=dict, help_text='Details of the performance metric used to determine the reward (e.g., ratings, urgent orders).')),
                ('awarded_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date the reward was given.')),
                ('prize', models.CharField(blank=True, help_text="Prize or benefit given to the writer (e.g., 'Bonus $50').", max_length=255, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the reward.', null=True)),
                ('writer', models.ForeignKey(help_text='The writer receiving this reward.', on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='writer_management.writerprofile')),
                ('criteria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rewards_given', to='writer_management.writerrewardcriteria')),
            ],
        ),
        migrations.CreateModel(
            name='WriterSupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Order Issue', 'Order Issue'), ('Payment Issue', 'Payment Issue'), ('Technical Support', 'Technical Support'), ('Other', 'Other')], max_length=50)),
                ('description', models.TextField(help_text='Details of the issue.')),
                ('attachment', models.FileField(blank=True, help_text='Optional attachment.', null=True, upload_to='writer_tickets/')),
                ('status', models.CharField(choices=[('Open', 'Open'), ('In Progress', 'In Progress'), ('Resolved', 'Resolved'), ('Closed', 'Closed')], default='Open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_writer_tickets', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterSuspension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for suspension.')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='Optional end date for temporary suspensions.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='If True, the writer is currently suspended.')),
                ('suspended_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suspension_admins', to=settings.AUTH_USER_MODEL)),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suspensions', to='writer_management.writerprofile')),
            ],
        ),
    ]
