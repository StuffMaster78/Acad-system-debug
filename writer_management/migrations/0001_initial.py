# Generated by Django 5.1.5 on 2025-01-29 12:15

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '__first__'),
        ('websites', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WriterLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the writer level (e.g., Beginner, Intermediate).', max_length=50, unique=True)),
                ('max_orders', models.PositiveIntegerField(default=10, help_text='Maximum number of orders the writer can take simultaneously.')),
                ('base_pay_per_page', models.DecimalField(decimal_places=2, default=0.0, help_text='Base pay per page.', max_digits=10)),
                ('base_pay_per_slide', models.DecimalField(decimal_places=2, default=0.0, help_text='Base pay per slide.', max_digits=10)),
                ('tip_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Tip percentage.', max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='WriterProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_id', models.CharField(help_text='Unique writer registration ID (e.g., Writer #12345).', max_length=50, unique=True)),
                ('email', models.EmailField(help_text="Writer's email address.", max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text="Writer's phone number.", max_length=15, null=True)),
                ('country', models.CharField(blank=True, help_text="Writer's country.", max_length=100, null=True)),
                ('timezone', models.CharField(default='UTC', help_text="Writer's timezone.", max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Last known IP address of the writer.', null=True)),
                ('location_verified', models.BooleanField(default=False, help_text="Whether the writer's location has been verified.")),
                ('joined', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the writer joined.')),
                ('last_logged_in', models.DateTimeField(blank=True, help_text='The last time the writer logged in.', null=True)),
                ('completed_orders', models.PositiveIntegerField(default=0, help_text='Total completed orders by the writer.')),
                ('number_of_takes', models.PositiveIntegerField(default=0, help_text='Total orders the writer has accepted.')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings by the writer.', max_digits=12)),
                ('verification_status', models.BooleanField(default=False, help_text='Indicates whether the writer has been verified.')),
                ('verification_documents', models.JSONField(blank=True, default=dict, help_text='Uploaded documents for verification (e.g., ID, certificates).')),
                ('skills', models.TextField(blank=True, help_text='Skills and specialties of the writer.', null=True)),
                ('subject_preferences', models.TextField(blank=True, help_text='Subjects or topics the writer prefers to handle.', null=True)),
                ('education', models.JSONField(blank=True, default=list, help_text='List of schools attended and uploaded certificates.')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating of the writer.', max_digits=3)),
                ('active_orders', models.PositiveIntegerField(default=0, help_text='Number of ongoing orders assigned to the writer.')),
                ('user', models.OneToOneField(help_text='The user associated with this writer profile.', limit_choices_to={'role': 'writer'}, on_delete=django.db.models.deletion.CASCADE, related_name='writer_profile', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(help_text='Website the writer is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='writers', to='websites.website')),
                ('writer_level', models.ForeignKey(blank=True, help_text='The level of the writer.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='writers', to='writer_management.writerlevel')),
            ],
        ),
        migrations.CreateModel(
            name='WriterLeave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(help_text='Start date of the leave period.')),
                ('end_date', models.DateTimeField(help_text='End date of the leave period.')),
                ('reason', models.TextField(blank=True, help_text='Reason for the leave (e.g., vacation, emergency).', null=True)),
                ('approved', models.BooleanField(default=False, help_text='Whether the leave has been approved by an admin.')),
                ('writer', models.ForeignKey(help_text='The writer who is unavailable.', on_delete=django.db.models.deletion.CASCADE, related_name='leaves', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(help_text='Name of the educational institution.', max_length=255)),
                ('degree', models.CharField(help_text='Degree or certification obtained.', max_length=255)),
                ('graduation_year', models.PositiveIntegerField(blank=True, help_text='Year of graduation.', null=True)),
                ('document', models.FileField(help_text='Upload proof of education (e.g., certificate).', upload_to='education_certificates/')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether this education has been verified by the admin.')),
                ('writer', models.ForeignKey(help_text='The writer whose education details are being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='education_details', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('warning', 'Warning'), ('probation', 'Probation'), ('suspension', 'Suspension'), ('deactivation', 'Deactivation')], help_text='The type of action taken.', max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Reason for taking this action.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('writer', models.ForeignKey(help_text='The writer this action applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total payment amount made to the writer.', max_digits=12)),
                ('bonuses', models.DecimalField(decimal_places=2, default=0.0, help_text='Bonuses received by the writer.', max_digits=12)),
                ('fines', models.DecimalField(decimal_places=2, default=0.0, help_text='Fines deducted from the writer.', max_digits=12)),
                ('tips', models.DecimalField(decimal_places=2, default=0.0, help_text='Tips received by the writer.', max_digits=12)),
                ('payment_date', models.DateTimeField(auto_now_add=True, help_text='Date of the payment.')),
                ('description', models.TextField(blank=True, help_text='Optional description for the payment.', null=True)),
                ('writer', models.ForeignKey(help_text='The writer receiving the payment.', on_delete=django.db.models.deletion.CASCADE, related_name='payment_history', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Rating given by the client (1 to 5).')),
                ('feedback', models.TextField(blank=True, help_text='Optional feedback provided by the client.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the rating was created.')),
                ('client', models.ForeignKey(help_text='The client providing the rating.', limit_choices_to={'role': 'client'}, on_delete=django.db.models.deletion.CASCADE, related_name='ratings_given', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(help_text='The order associated with this rating.', on_delete=django.db.models.deletion.CASCADE, related_name='writer_ratings', to='orders.order')),
                ('writer', models.ForeignKey(help_text='The writer being rated.', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='writer_management.writerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WriterReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Custom title for the reward (e.g., 'Top Performer').", max_length=200)),
                ('performance_metric', models.JSONField(blank=True, default=dict, help_text='Details of the performance metric used to determine the reward (e.g., ratings, urgent orders).')),
                ('awarded_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date the reward was given.')),
                ('prize', models.CharField(blank=True, help_text="Prize or benefit given to the writer (e.g., 'Bonus $50').", max_length=255, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the reward.', null=True)),
                ('writer', models.ForeignKey(help_text='The writer receiving this reward.', on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='writer_management.writerprofile')),
            ],
        ),
    ]
