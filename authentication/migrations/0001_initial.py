# Generated by Django 5.2.3 on 2025-06-21 02:21

import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccountDeletionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('confirmation_time', models.DateTimeField(blank=True, null=True)),
                ('rejection_time', models.DateTimeField(blank=True, null=True)),
                ('scheduled_deletion_time', models.DateTimeField(blank=True, help_text='Time after which user will be permanently deleted.', null=True)),
                ('undo_token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('undo_token_expiry', models.DateTimeField(blank=True, null=True)),
                ('reason', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AccountLockout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Explanation for why the user account was locked out')),
                ('locked_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(choices=[('MFA_ENABLED', 'MFA Enabled'), ('MFA_DISABLED', 'MFA Disabled'), ('MFA_RESET', 'MFA Reset'), ('MFA_RECOVERY_REQUESTED', 'MFA Recovery Requested'), ('MFA_CHALLENGE_REQUESTED', 'MFA Challenge Requested'), ('MFA_CHALLANGE_VERIFIED', 'MFA Challenge Verified'), ('MFA_RECOVERY_COMPLETED', 'MFA Recovery Completed'), ('LOGIN_SUCCESS', 'Login Successful'), ('LOGIN_FAILED', 'Login Failed'), ('MFA_VERIFIED', 'MFA Verified'), ('PASSWORD_RESET_REQUESTED', 'Password Reset Requested'), ('PASSWORD_RESET_USED', 'Password Reset Used'), ('MAGIC_LINK_REQUESTED', 'Magic Link Requested'), ('MAGIC_LINK_USED', 'Magic Link Used'), ('ACCOUNT_UPDATED', 'Account Updated'), ('ACCOUNT_LOCKED', 'Account Locked'), ('QR_CODE_GENERATED', 'QR Code Generated'), ('QR_CODE_SCANNED', 'QR Code Scanned'), ('DEVICE_DELETED', 'Device Deleted')], help_text='The action performed by the user.', max_length=50)),
                ('action', models.CharField(choices=[('MFA_ENABLED', 'MFA Enabled'), ('MFA_DISABLED', 'MFA Disabled'), ('MFA_RESET', 'MFA Reset'), ('MFA_RECOVERY_REQUESTED', 'MFA Recovery Requested'), ('MFA_CHALLENGE_REQUESTED', 'MFA Challenge Requested'), ('MFA_CHALLANGE_VERIFIED', 'MFA Challenge Verified'), ('MFA_RECOVERY_COMPLETED', 'MFA Recovery Completed'), ('LOGIN_SUCCESS', 'Login Successful'), ('LOGIN_FAILED', 'Login Failed'), ('MFA_VERIFIED', 'MFA Verified'), ('PASSWORD_RESET_REQUESTED', 'Password Reset Requested'), ('PASSWORD_RESET_USED', 'Password Reset Used'), ('MAGIC_LINK_REQUESTED', 'Magic Link Requested'), ('MAGIC_LINK_USED', 'Magic Link Used'), ('ACCOUNT_UPDATED', 'Account Updated'), ('ACCOUNT_LOCKED', 'Account Locked'), ('QR_CODE_GENERATED', 'QR Code Generated'), ('QR_CODE_SCANNED', 'QR Code Scanned'), ('DEVICE_DELETED', 'Device Deleted')], max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('device', models.CharField(blank=True, max_length=255, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BackupCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='One-time backup code', max_length=32)),
                ('used', models.BooleanField(default=False, help_text='Has this code been used?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, help_text='Timestamp when the code was used', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BlockedIP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('blocked_until', models.DateTimeField(help_text='Time until this IP is blocked.')),
            ],
        ),
        migrations.CreateModel(
            name='BlockedIPLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('reason', models.TextField()),
                ('blocked_at', models.DateTimeField(auto_now_add=True)),
                ('duration_minutes', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='EncryptedRefreshToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encrypted_token', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ImpersonationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ImpersonationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='LoginSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('device_name', models.CharField(blank=True, max_length=255, null=True)),
                ('logged_in_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('token', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ['-logged_in_at'],
            },
        ),
        migrations.CreateModel(
            name='LogoutEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('session_key', models.CharField(blank=True, max_length=255, null=True)),
                ('reason', models.CharField(blank=True, help_text='Optional reason (e.g., user_initiated, session_expired, admin_kick)', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Logout Event',
                'verbose_name_plural': 'Logout Events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MagicLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, help_text='Unique magic link token.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Expiration time for the magic link.')),
                ('used_at', models.DateTimeField(blank=True, help_text='Time the magic link was used.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MFASettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_mfa_enabled', models.BooleanField(default=False)),
                ('mfa_method', models.CharField(blank=True, choices=[('qr_code', 'QR Code (TOTP)'), ('email', 'Email Verification'), ('sms', 'SMS Verification')], max_length=50, null=True)),
                ('mfa_phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('mfa_email_verified', models.BooleanField(default=False)),
                ('mfa_secret', models.CharField(blank=True, max_length=255, null=True)),
                ('otp_code', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_expires_at', models.DateTimeField(blank=True, null=True)),
                ('mfa_recovery_token', models.CharField(blank=True, max_length=64, null=True)),
                ('mfa_recovery_expires', models.DateTimeField(blank=True, null=True)),
                ('backup_codes', models.JSONField(blank=True, default=list)),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(max_length=6)),
                ('expiration_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('otp_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationConfirmationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('confirmed_at', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SecureToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encrypted_token', models.TextField(help_text='Encrypted API token.')),
                ('purpose', models.CharField(choices=[('api_key', 'API Key'), ('refresh_token', 'JWT Refresh Token'), ('other', 'Other')], help_text='Purpose of the token.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this token will expire.')),
                ('is_active', models.BooleanField(default=True, help_text='Is this token currently active?')),
            ],
        ),
        migrations.CreateModel(
            name='TrustedDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_token', models.CharField(help_text='Hashed token for the trusted device.', max_length=255, unique=True)),
                ('device_info', models.TextField(help_text='Device user-agent or metadata for tracking.')),
                ('last_used', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(help_text='Expiration time for trusted device.')),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(help_text='Unique identifier for the session.', max_length=255, unique=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the session was created.', null=True)),
                ('device_type', models.CharField(blank=True, help_text='Device information for session tracking.', max_length=255, null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Full User-Agent string of the client device.', null=True)),
                ('country', models.CharField(blank=True, help_text='Geolocation country from IP.', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(help_text='Absolute expiration time of the session.')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the session is still considered active.')),
            ],
        ),
    ]
