# Generated by Django 5.1.5 on 2025-01-29 11:35

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '__first__'),
        ('tickets', '__first__'),
        ('websites', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SupportProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the support staff.', max_length=255)),
                ('registration_id', models.CharField(help_text='Unique support staff registration ID (e.g., Support #12345).', max_length=50, unique=True)),
                ('email', models.EmailField(help_text="Support staff's email address.", max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text="Support staff's phone number.", max_length=15, null=True)),
                ('last_logged_in', models.DateTimeField(blank=True, help_text='The last time the support staff logged in.', null=True)),
                ('orders_handled', models.PositiveIntegerField(default=0, help_text='Total number of orders managed by this support staff.')),
                ('disputes_handled', models.PositiveIntegerField(default=0, help_text='Total number of disputes resolved by this support staff.')),
                ('tickets_handled', models.PositiveIntegerField(default=0, help_text='Total number of tickets resolved by this support staff.')),
                ('user', models.OneToOneField(help_text='The user associated with this support profile.', limit_choices_to={'role': 'support'}, on_delete=django.db.models.deletion.CASCADE, related_name='support_profile', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(help_text='The website the support staff is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='support_staff', to='websites.website')),
            ],
        ),
        migrations.CreateModel(
            name='SupportPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_response_time', models.DurationField(blank=True, help_text='Average time taken to respond to tickets or disputes.', null=True)),
                ('average_resolution_time', models.DurationField(blank=True, help_text='Average time taken to resolve tickets or disputes.', null=True)),
                ('total_tickets_resolved', models.PositiveIntegerField(default=0, help_text='Total number of tickets resolved by the support staff.')),
                ('total_disputes_resolved', models.PositiveIntegerField(default=0, help_text='Total number of disputes resolved by the support staff.')),
                ('support_staff', models.OneToOneField(help_text='The support staff whose performance is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='performance', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='SupportNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Priority level of the notification.', max_length=10)),
                ('message', models.TextField(help_text='Notification message.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the notification was created.')),
                ('is_read', models.BooleanField(default=False, help_text='Indicates whether the notification has been read.')),
                ('related_dispute', models.ForeignKey(blank=True, help_text='Related dispute, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='orders.dispute')),
                ('related_ticket', models.ForeignKey(blank=True, help_text='Related ticket, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='tickets.ticket')),
                ('support_staff', models.ForeignKey(help_text='The support staff receiving the notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='SupportAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(help_text='Shift start time.')),
                ('end_time', models.DateTimeField(help_text='Shift end time.')),
                ('is_recurring', models.BooleanField(default=False, help_text='Indicates if this availability is recurring (e.g., daily, weekly).')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the support staff is currently available.')),
                ('support_staff', models.ForeignKey(help_text='The support staff whose availability is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='availability', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='SupportActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.TextField(help_text='Detailed description of the activity performed.')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp of the activity.')),
                ('support_staff', models.ForeignKey(help_text='The support staff whose activity is being logged.', on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='SupportActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text="Description of the action performed (e.g., 'Assigned Order', 'Resolved Dispute').", max_length=255)),
                ('is_suspended', models.BooleanField(default=False, help_text='Indicates whether the support staff is suspended.')),
                ('suspension_reason', models.TextField(blank=True, help_text='Reason for suspending the support staff.', null=True)),
                ('suspension_start_date', models.DateTimeField(blank=True, help_text='Date and time when the suspension started.', null=True)),
                ('suspension_end_date', models.DateTimeField(blank=True, help_text='Date and time when the suspension will end, if applicable.', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the action was performed.')),
                ('related_dispute', models.ForeignKey(blank=True, help_text='The dispute associated with this action, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_actions', to='orders.dispute')),
                ('related_order', models.ForeignKey(blank=True, help_text='The order associated with this action, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_actions', to='orders.order')),
                ('related_ticket', models.ForeignKey(blank=True, help_text='The ticket associated with this action, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_actions', to='tickets.ticket')),
                ('support_staff', models.ForeignKey(help_text='The support staff who performed this action.', on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EscalationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for escalation.')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp of the escalation.')),
                ('escalated_to', models.ForeignKey(help_text='The user (admin/superadmin) to whom the issue is escalated.', on_delete=django.db.models.deletion.CASCADE, related_name='escalated_issues', to=settings.AUTH_USER_MODEL)),
                ('related_dispute', models.ForeignKey(blank=True, help_text='Related dispute, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalation_logs', to='orders.dispute')),
                ('related_ticket', models.ForeignKey(blank=True, help_text='Related ticket, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalation_logs', to='tickets.ticket')),
                ('escalated_by', models.ForeignKey(help_text='The support staff escalating the issue.', on_delete=django.db.models.deletion.CASCADE, related_name='escalation_logs', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='DisputeResolutionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution_notes', models.TextField(blank=True, help_text='Details of the resolution.', null=True)),
                ('resolved_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp when the dispute was resolved.')),
                ('dispute', models.OneToOneField(help_text='The dispute being resolved.', on_delete=django.db.models.deletion.CASCADE, related_name='resolution_log', to='orders.dispute')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='The support staff resolving the dispute.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispute_resolutions', to='support_management.supportprofile')),
            ],
        ),
        migrations.CreateModel(
            name='TicketAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the ticket was assigned.')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Timestamp when the ticket was resolved.', null=True)),
                ('assigned_to', models.ForeignKey(help_text='The support staff assigned to this ticket.', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tickets', to='support_management.supportprofile')),
                ('ticket', models.OneToOneField(help_text='The ticket being assigned.', on_delete=django.db.models.deletion.CASCADE, related_name='assignment', to='tickets.ticket')),
            ],
        ),
    ]
